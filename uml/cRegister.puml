@startuml

namespace std {
    class exception {
    }
}

namespace jbr {

    note "using std::unique_ptr<jbr::reg::Instance> = jbr::Register" as Register_Class_Name

    namespace reg {

        std.exception <|-- jbr.reg.exception

        class exception {
            -mMsg : std::string
            __
            +explicit exception(std::string &&msg)
            +~exception() noexcept override
            ..
            +const char  *what() const noexcept override
        }

        Manager --o	Instance
        Instance --o Rights
        Instance --o Variable

        class   Manager {
            +{static} jbr::Register create(const std::string &path, const std::optional<jbr::reg::Rights> &rights = std::nullopt) noexcept(false)
            +{static} jbr::Register open(const std::string &path) noexcept(false)
            +{static} bool          exist(const std::string &path) noexcept
            +{static} void          destroy(jbr::Register &reg) noexcept(false)
        }

        class Instance {
            -mPath : std::string
            __
            +Instance(const char *path)
            +Instance(std::string &&path)
            +~Instance()
            ..
            +void   verify() const noexcept(false)
            -void   verify(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            ..
            +bool exist() const noexcept
            ..
            +const std::string  &localization() const noexcept
            ..
            +void   copy(const char *pathTo) const noexcept(false)
            +void   move(const char *pathTo) noexcept(false)
            +void   rename(const char *newPath) noexcept(false)
            ..
            +jbr::reg::Rights   rights() const noexcept(false)
            -jbr::reg::Rights   rights(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            +void               applyRights(const jbr::reg::Rights &rights) const noexcept(false)
            ..
            +bool isOpenable() const noexcept(false)
            +bool isWritable() const noexcept(false)
            +bool isCopyable() const noexcept(false)
            +bool isMovable() const noexcept(false)
            +bool isDestroyable() const noexcept(false)
            -bool isOpenable(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            -bool isWritable(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            -bool isCopyable(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            -bool isMovable(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            -bool isDestroyable(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            -bool isOpenable(const jbr::reg::Rights &rights) const noexcept(false)
            -bool isWritable(const jbr::reg::Rights &rights) const noexcept(false)
            -bool isCopyable(const jbr::reg::Rights &rights) const noexcept(false)
            -bool isMovable(const jbr::reg::Rights &rights) const noexcept(false)
            -bool isDestroyable(const jbr::reg::Rights &rights) const noexcept(false)
            ..
            +jbr::reg::Variable operator[](const char *variableName) const noexcept(false)
            +jbr::reg::Variable get(const char *variableName) const noexcept(false)
            +void               set(const jbr::reg::Variable &variable) const noexcept(false)
            +void               update(const jbr::reg::Variable &variable) const noexcept(false)
            +void               copy(const char *variableNameFrom, const char *variableNameTo) const noexcept(false)
            +void               rename(const char *variableNameFrom, const char *variableNameTo) const noexcept(false)
            +void               remove(const char *variableName) const noexcept(false)
            ..
            -void    checkPathValidity() const noexcept(false)
            ..
            -tinyxml2::XMLElement   *newXMLElement(tinyxml2::XMLDocument *xmlDocument, const char *elementName) const noexcept(false)
            -tinyxml2::XMLElement   *getSubXMLElement(tinyxml2::XMLNode *node, const char *subNodeName) const noexcept(false)
            ..
            -void saveXMLFile(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            -void loadXMLFile(tinyxml2::XMLDocument &xmlDocument) const noexcept(false)
            ..
            -void createHeader(const std::optional<jbr::reg::Rights> &rights) const noexcept(false)
            -void writeRights(tinyxml2::XMLDocument *reg, tinyxml2::XMLNode *nodeHeader, tinyxml2::XMLElement *version, const jbr::reg::Rights &rights) const noexcept(false)
            -void queryRightToXMLElement(const tinyxml2::XMLElement *xmlElement, bool *status) const noexcept(false)
        }

        class Variable {
            -mName : std::string
            -mValue : std::string
            -mRights : jbr::reg::Rights
            __
            +Variable()
            +Variable(std::string &&name, std::string &&value, const std::optional<jbr::reg::Rights> &rights = std::nullopt)
            +~Variable()
            ..
            +void               set(std::string &&name, std::string &&value, const std::optional<jbr::reg::Rights> &rights = std::nullopt) const noexcept(false)
            +const char         *getName() const noexcept(false)
            +const char         *getValue() const noexcept(false)
            +const jbr::Rights  &getRights() const noexcept(false)
        }

        class Rights {
            +mRead : bool
            +mWrite : bool
            +mOpen : bool
            +mCopy : bool
            +mMove : bool
            +mDestroy : bool
            __
            +Rights()
        }

        namespace var {

            namespace perm {

                jbr.reg.Variable --* jbr.reg.var.perm.Rights

                class Rights {
                    +mRead : bool
                    +mWrite : bool
                    +mUpdate : bool
                    +mRename : bool
                    +mCopy : bool
                    +mRemove : bool
                    __
                    +Rights()
                    +Rights(bool rd, bool wr, bool up, bool rn, bool cp, bool rm)
                    +Rights(const Rights &)
                    +Rights  &operator=(const Rights &rights)
                    +~Rights()
                }

            }
        }

    }

}

@enduml
